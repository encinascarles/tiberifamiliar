datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch"]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id String @id @default(cuid())

  name     String
  email    String  @unique
  password String?
  image    String?

  recipes             Recipe[]
  families            FamilyMembership[]
  favoriteRecipes     Recipe[]           @relation("favorites")
  sentInvitations     Invitation[]       @relation("inviter")
  receivedInvitations Invitation[]       @relation("invitee")

  emailVerified DateTime?
  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recipe {
  id String @id @default(cuid())

  title           String?
  prep_time       Int?
  total_time      Int?
  servings        Int?
  ingredients     String[]
  steps           String[]
  recommendations String?
  origin          String?
  image           String?

  cookId String?

  draft Boolean @default(false)

  visibility Visibility @default(PUBLIC)

  authorId    String
  author      User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  favoritedBy User[] @relation("favorites")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Family {
  id          String  @id @default(cuid())
  name        String
  description String?
  image       String?

  members FamilyMembership[]

  invitations Invitation[]
}

model FamilyMembership {
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  role     Role   @default(MEMBER)

  @@id([userId, familyId])
}

model Invitation {
  id        String           @id @default(cuid())
  inviterId String
  inviter   User             @relation("inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  inviteeId String
  invitee   User             @relation("invitee", fields: [inviteeId], references: [id], onDelete: Cascade)
  familyId  String
  family    Family           @relation(fields: [familyId], references: [id], onDelete: Cascade)
  status    InvitationStatus
}

enum Visibility {
  PUBLIC
  FAMILY
  PRIVATE
  AI
}

enum Role {
  ADMIN
  MEMBER
}

enum InvitationStatus {
  PENDING
  SEEN
  ACCEPTED
  DECLINED
}
